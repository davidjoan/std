<?php

/**
 * BaseArea
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $representative_id
 * @property integer $rank
 * @property string $name
 * @property string $description
 * @property string $active
 * @property Representative $Representative
 * @property Doctrine_Collection $FromRecords
 * @property Doctrine_Collection $ToRecords
 * @property Doctrine_Collection $Users
 * @property Doctrine_Collection $RecordLog
 * @property Doctrine_Collection $Document
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method integer             getRepresentativeId()  Returns the current record's "representative_id" value
 * @method integer             getRank()              Returns the current record's "rank" value
 * @method string              getName()              Returns the current record's "name" value
 * @method string              getDescription()       Returns the current record's "description" value
 * @method string              getActive()            Returns the current record's "active" value
 * @method Representative      getRepresentative()    Returns the current record's "Representative" value
 * @method Doctrine_Collection getFromRecords()       Returns the current record's "FromRecords" collection
 * @method Doctrine_Collection getToRecords()         Returns the current record's "ToRecords" collection
 * @method Doctrine_Collection getUsers()             Returns the current record's "Users" collection
 * @method Doctrine_Collection getRecordLog()         Returns the current record's "RecordLog" collection
 * @method Doctrine_Collection getDocument()          Returns the current record's "Document" collection
 * @method Area                setId()                Sets the current record's "id" value
 * @method Area                setRepresentativeId()  Sets the current record's "representative_id" value
 * @method Area                setRank()              Sets the current record's "rank" value
 * @method Area                setName()              Sets the current record's "name" value
 * @method Area                setDescription()       Sets the current record's "description" value
 * @method Area                setActive()            Sets the current record's "active" value
 * @method Area                setRepresentative()    Sets the current record's "Representative" value
 * @method Area                setFromRecords()       Sets the current record's "FromRecords" collection
 * @method Area                setToRecords()         Sets the current record's "ToRecords" collection
 * @method Area                setUsers()             Sets the current record's "Users" collection
 * @method Area                setRecordLog()         Sets the current record's "RecordLog" collection
 * @method Area                setDocument()          Sets the current record's "Document" collection
 * 
 * @package    std
 * @subpackage model
 * @author     David Joan Tataje Mendoza <dtataje@datasolutions.pe>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseArea extends DoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('t_area');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('representative_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'notnull' => true,
             ));
        $this->hasColumn('rank', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', 5000, array(
             'type' => 'string',
             'length' => 5000,
             'notnull' => false,
             ));
        $this->hasColumn('active', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 0,
             ));


        $this->index('i_active', array(
             'fields' => 
             array(
              0 => 'active',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => true,
             ));
        $this->option('boolean_columns', array(
             0 => 'active',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Representative', array(
             'local' => 'representative_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('Record as FromRecords', array(
             'local' => 'id',
             'foreign' => 'from_area_id'));

        $this->hasMany('Record as ToRecords', array(
             'local' => 'id',
             'foreign' => 'to_area_id'));

        $this->hasMany('User as Users', array(
             'local' => 'id',
             'foreign' => 'area_id'));

        $this->hasMany('RecordLog', array(
             'local' => 'id',
             'foreign' => 'from_area_id'));

        $this->hasMany('Document', array(
             'local' => 'id',
             'foreign' => 'area_id'));

        $sluggableext0 = new Doctrine_Template_SluggableExt(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $this->actAs($sluggableext0);
        $this->actAs($timestampable0);
        $this->actAs($nestedset0);
    }
}