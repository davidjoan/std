<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $area_id
 * @property integer $profile_id
 * @property string $username
 * @property string $password
 * @property string $first_name
 * @property string $last_name
 * @property string $email
 * @property string $phone
 * @property string $active
 * @property timestamp $last_access_at
 * @property Profile $Profile
 * @property Doctrine_Collection $Documents
 * @property Doctrine_Collection $Records
 * @property Doctrine_Collection $RecordLogs
 * @property Area $Area
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method integer             getAreaId()         Returns the current record's "area_id" value
 * @method integer             getProfileId()      Returns the current record's "profile_id" value
 * @method string              getUsername()       Returns the current record's "username" value
 * @method string              getPassword()       Returns the current record's "password" value
 * @method string              getFirstName()      Returns the current record's "first_name" value
 * @method string              getLastName()       Returns the current record's "last_name" value
 * @method string              getEmail()          Returns the current record's "email" value
 * @method string              getPhone()          Returns the current record's "phone" value
 * @method string              getActive()         Returns the current record's "active" value
 * @method timestamp           getLastAccessAt()   Returns the current record's "last_access_at" value
 * @method Profile             getProfile()        Returns the current record's "Profile" value
 * @method Doctrine_Collection getDocuments()      Returns the current record's "Documents" collection
 * @method Doctrine_Collection getRecords()        Returns the current record's "Records" collection
 * @method Doctrine_Collection getRecordLogs()     Returns the current record's "RecordLogs" collection
 * @method Area                getArea()           Returns the current record's "Area" value
 * @method User                setId()             Sets the current record's "id" value
 * @method User                setAreaId()         Sets the current record's "area_id" value
 * @method User                setProfileId()      Sets the current record's "profile_id" value
 * @method User                setUsername()       Sets the current record's "username" value
 * @method User                setPassword()       Sets the current record's "password" value
 * @method User                setFirstName()      Sets the current record's "first_name" value
 * @method User                setLastName()       Sets the current record's "last_name" value
 * @method User                setEmail()          Sets the current record's "email" value
 * @method User                setPhone()          Sets the current record's "phone" value
 * @method User                setActive()         Sets the current record's "active" value
 * @method User                setLastAccessAt()   Sets the current record's "last_access_at" value
 * @method User                setProfile()        Sets the current record's "Profile" value
 * @method User                setDocuments()      Sets the current record's "Documents" collection
 * @method User                setRecords()        Sets the current record's "Records" collection
 * @method User                setRecordLogs()     Sets the current record's "RecordLogs" collection
 * @method User                setArea()           Sets the current record's "Area" value
 * 
 * @package    std
 * @subpackage model
 * @author     David Joan Tataje Mendoza <dtataje@datasolutions.pe>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends DoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('t_user');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('area_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'notnull' => true,
             ));
        $this->hasColumn('profile_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'notnull' => true,
             ));
        $this->hasColumn('username', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'notnull' => true,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('first_name', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'notnull' => true,
             ));
        $this->hasColumn('last_name', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'notnull' => true,
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'notnull' => true,
             ));
        $this->hasColumn('phone', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('active', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('last_access_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));


        $this->index('u_username', array(
             'fields' => 
             array(
              0 => 'username',
             ),
             'type' => 'unique',
             ));
        $this->index('u_firstname_lastname', array(
             'fields' => 
             array(
              0 => 'first_name',
              1 => 'last_name',
             ),
             'type' => 'unique',
             ));
        $this->index('i_active', array(
             'fields' => 'active',
             ));
        $this->index('i_created_at', array(
             'fields' => 'created_at',
             ));
        $this->index('i_updated_at', array(
             'fields' => 'updated_at',
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => true,
             ));
        $this->option('boolean_columns', array(
             0 => 'active',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Profile', array(
             'local' => 'profile_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('Document as Documents', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Record as Records', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('RecordLog as RecordLogs', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('Area', array(
             'local' => 'area_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $sluggableext0 = new Doctrine_Template_SluggableExt(array(
             'fields' => 
             array(
              0 => 'username',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($sluggableext0);
        $this->actAs($timestampable0);
    }
}