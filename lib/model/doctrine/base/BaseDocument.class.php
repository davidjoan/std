<?php

/**
 * BaseDocument
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $record_id
 * @property integer $user_id
 * @property integer $area_id
 * @property integer $representative_id
 * @property integer $document_class_id
 * @property string $code
 * @property string $issue
 * @property integer $qty
 * @property string $type
 * @property string $description
 * @property string $observations
 * @property string $main
 * @property string $reception_method
 * @property timestamp $document_date
 * @property timestamp $reception_date
 * @property string $registration_type
 * @property string $path
 * @property string $active
 * @property Record $Record
 * @property User $User
 * @property Area $Area
 * @property DocumentClass $DocumentClass
 * @property Representative $Representative
 * 
 * @method integer        getId()                Returns the current record's "id" value
 * @method integer        getRecordId()          Returns the current record's "record_id" value
 * @method integer        getUserId()            Returns the current record's "user_id" value
 * @method integer        getAreaId()            Returns the current record's "area_id" value
 * @method integer        getRepresentativeId()  Returns the current record's "representative_id" value
 * @method integer        getDocumentClassId()   Returns the current record's "document_class_id" value
 * @method string         getCode()              Returns the current record's "code" value
 * @method string         getIssue()             Returns the current record's "issue" value
 * @method integer        getQty()               Returns the current record's "qty" value
 * @method string         getType()              Returns the current record's "type" value
 * @method string         getDescription()       Returns the current record's "description" value
 * @method string         getObservations()      Returns the current record's "observations" value
 * @method string         getMain()              Returns the current record's "main" value
 * @method string         getReceptionMethod()   Returns the current record's "reception_method" value
 * @method timestamp      getDocumentDate()      Returns the current record's "document_date" value
 * @method timestamp      getReceptionDate()     Returns the current record's "reception_date" value
 * @method string         getRegistrationType()  Returns the current record's "registration_type" value
 * @method string         getPath()              Returns the current record's "path" value
 * @method string         getActive()            Returns the current record's "active" value
 * @method Record         getRecord()            Returns the current record's "Record" value
 * @method User           getUser()              Returns the current record's "User" value
 * @method Area           getArea()              Returns the current record's "Area" value
 * @method DocumentClass  getDocumentClass()     Returns the current record's "DocumentClass" value
 * @method Representative getRepresentative()    Returns the current record's "Representative" value
 * @method Document       setId()                Sets the current record's "id" value
 * @method Document       setRecordId()          Sets the current record's "record_id" value
 * @method Document       setUserId()            Sets the current record's "user_id" value
 * @method Document       setAreaId()            Sets the current record's "area_id" value
 * @method Document       setRepresentativeId()  Sets the current record's "representative_id" value
 * @method Document       setDocumentClassId()   Sets the current record's "document_class_id" value
 * @method Document       setCode()              Sets the current record's "code" value
 * @method Document       setIssue()             Sets the current record's "issue" value
 * @method Document       setQty()               Sets the current record's "qty" value
 * @method Document       setType()              Sets the current record's "type" value
 * @method Document       setDescription()       Sets the current record's "description" value
 * @method Document       setObservations()      Sets the current record's "observations" value
 * @method Document       setMain()              Sets the current record's "main" value
 * @method Document       setReceptionMethod()   Sets the current record's "reception_method" value
 * @method Document       setDocumentDate()      Sets the current record's "document_date" value
 * @method Document       setReceptionDate()     Sets the current record's "reception_date" value
 * @method Document       setRegistrationType()  Sets the current record's "registration_type" value
 * @method Document       setPath()              Sets the current record's "path" value
 * @method Document       setActive()            Sets the current record's "active" value
 * @method Document       setRecord()            Sets the current record's "Record" value
 * @method Document       setUser()              Sets the current record's "User" value
 * @method Document       setArea()              Sets the current record's "Area" value
 * @method Document       setDocumentClass()     Sets the current record's "DocumentClass" value
 * @method Document       setRepresentative()    Sets the current record's "Representative" value
 * 
 * @package    std
 * @subpackage model
 * @author     David Joan Tataje Mendoza <dtataje@datasolutions.pe>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDocument extends DoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('t_document');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('record_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'notnull' => true,
             ));
        $this->hasColumn('area_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'notnull' => true,
             ));
        $this->hasColumn('representative_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'notnull' => true,
             ));
        $this->hasColumn('document_class_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'notnull' => true,
             ));
        $this->hasColumn('code', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'notnull' => true,
             ));
        $this->hasColumn('issue', 'string', 200, array(
             'type' => 'string',
             'length' => 200,
             'notnull' => true,
             ));
        $this->hasColumn('qty', 'integer', 10, array(
             'type' => 'integer',
             'length' => 10,
             'default' => 0,
             ));
        $this->hasColumn('type', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('description', 'string', 1000, array(
             'type' => 'string',
             'length' => 1000,
             'notnull' => true,
             ));
        $this->hasColumn('observations', 'string', 1000, array(
             'type' => 'string',
             'length' => 1000,
             'notnull' => false,
             ));
        $this->hasColumn('main', 'string', 1000, array(
             'type' => 'string',
             'length' => 1000,
             'notnull' => true,
             ));
        $this->hasColumn('reception_method', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 'R',
             ));
        $this->hasColumn('document_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('reception_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('registration_type', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('path', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('active', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 1,
             ));


        $this->index('i_code', array(
             'fields' => 
             array(
              0 => 'code',
             ),
             ));
        $this->index('u_code', array(
             'fields' => 
             array(
              0 => 'code',
             ),
             'type' => 'unique',
             ));
        $this->index('i_active', array(
             'fields' => 
             array(
              0 => 'active',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => true,
             ));
        $this->option('boolean_columns', array(
             0 => 'active',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Record', array(
             'local' => 'record_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Area', array(
             'local' => 'area_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('DocumentClass', array(
             'local' => 'document_class_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Representative', array(
             'local' => 'representative_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $sluggableext0 = new Doctrine_Template_SluggableExt(array(
             'fields' => 
             array(
              0 => 'code',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($sluggableext0);
        $this->actAs($timestampable0);
    }
}